// Generated from Grammar/Plato.g4 by ANTLR 4.13.1
import Antlr4

open class PlatoLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = PlatoLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(PlatoLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	public
	static let T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, 
            T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, 
            T__15=16, T__16=17, T__17=18, EXP=19, MUL=20, DIV=21, MOD=22, 
            PLUS=23, MINUS=24, LT=25, LTE=26, GT=27, GTE=28, EQUAL=29, DIF=30, 
            AND=31, OR=32, NOT=33, TRUE=34, FALSE=35, ASSIGN=36, MUL_ASSIGN=37, 
            DIV_ASSIGN=38, MOD_ASSIGN=39, ADD_ASSIGN=40, SUB_ASSIGN=41, 
            RETURN=42, BREAK=43, CONTINUE=44, ANY_TYPE=45, BOOL_TYPE=46, 
            INT_TYPE=47, FLOAT_TYPE=48, NUMBER_TYPE=49, STRING_TYPE=50, 
            ARRAY_TYPE=51, UNDERSCORE=52, ID=53, FLOAT=54, INT=55, STRING=56, 
            NEWLINE=57, WS=58, COMMENT=59, COMMENT_LONG=60

	public
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	public
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	public
	static let ruleNames: [String] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "EXP", "MUL", "DIV", "MOD", "PLUS", "MINUS", "LT", "LTE", "GT", 
		"GTE", "EQUAL", "DIF", "AND", "OR", "NOT", "TRUE", "FALSE", "ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
		"RETURN", "BREAK", "CONTINUE", "ANY_TYPE", "BOOL_TYPE", "INT_TYPE", "FLOAT_TYPE", 
		"NUMBER_TYPE", "STRING_TYPE", "ARRAY_TYPE", "UNDERSCORE", "ID", "LETTER", 
		"FLOAT", "INT", "DIGIT", "STRING", "ESC", "NEWLINE", "WS", "COMMENT", 
		"COMMENT_LONG"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "';'", "':'", "'if'", "'{'", "'}'", "'else'", "'while'", "'for'", 
		"'in'", "'from'", "'to'", "'by'", "'func'", "'('", "')'", "','", "'['", 
		"']'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'and'", "'or'", "'!'", "'true'", "'false'", "'='", 
		"'*='", "'/='", "'%='", "'+='", "'-='", "'return'", "'break'", "'continue'", 
		"'Any'", "'Bool'", "'Int'", "'Float'", "'Number'", "'String'", "'Array'", 
		"'_'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 
		nil, nil, nil, nil, nil, "EXP", "MUL", "DIV", "MOD", "PLUS", "MINUS", 
		"LT", "LTE", "GT", "GTE", "EQUAL", "DIF", "AND", "OR", "NOT", "TRUE", 
		"FALSE", "ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", 
		"SUB_ASSIGN", "RETURN", "BREAK", "CONTINUE", "ANY_TYPE", "BOOL_TYPE", 
		"INT_TYPE", "FLOAT_TYPE", "NUMBER_TYPE", "STRING_TYPE", "ARRAY_TYPE", 
		"UNDERSCORE", "ID", "FLOAT", "INT", "STRING", "NEWLINE", "WS", "COMMENT", 
		"COMMENT_LONG"
	]
	public
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	override open
	func getVocabulary() -> Vocabulary {
		return PlatoLexer.VOCABULARY
	}

	public
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, PlatoLexer._ATN, PlatoLexer._decisionToDFA, PlatoLexer._sharedContextCache)
	}

	override open
	func getGrammarFileName() -> String { return "Plato.g4" }

	override open
	func getRuleNames() -> [String] { return PlatoLexer.ruleNames }

	override open
	func getSerializedATN() -> [Int] { return PlatoLexer._serializedATN }

	override open
	func getChannelNames() -> [String] { return PlatoLexer.channelNames }

	override open
	func getModeNames() -> [String] { return PlatoLexer.modeNames }

	override open
	func getATN() -> ATN { return PlatoLexer._ATN }

	static let _serializedATN:[Int] = [
		4,0,60,385,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,
		0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
		1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
		1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
		1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,
		1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,
		1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,
		1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,52,3,52,312,8,52,1,52,1,52,1,52,5,
		52,317,8,52,10,52,12,52,320,9,52,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,
		55,3,55,330,8,55,1,55,5,55,333,8,55,10,55,12,55,336,9,55,1,56,1,56,1,57,
		1,57,1,57,5,57,343,8,57,10,57,12,57,346,9,57,1,57,1,57,1,58,1,58,3,58,
		352,8,58,1,59,3,59,355,8,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,5,
		61,365,8,61,10,61,12,61,368,9,61,1,61,1,61,1,62,1,62,1,62,1,62,5,62,376,
		8,62,10,62,12,62,379,9,62,1,62,1,62,1,62,1,62,1,62,2,344,377,0,63,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
		79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
		51,103,52,105,53,107,0,109,54,111,55,113,0,115,56,117,0,119,57,121,58,
		123,59,125,60,1,0,6,2,0,65,90,97,122,1,0,48,57,2,0,34,34,92,92,7,0,34,
		34,97,98,102,102,110,110,114,114,116,116,118,118,2,0,9,9,32,32,2,0,10,
		10,13,13,391,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
		1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
		0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,109,1,0,0,0,
		0,111,1,0,0,0,0,115,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
		0,125,1,0,0,0,1,127,1,0,0,0,3,129,1,0,0,0,5,131,1,0,0,0,7,134,1,0,0,0,
		9,136,1,0,0,0,11,138,1,0,0,0,13,143,1,0,0,0,15,149,1,0,0,0,17,153,1,0,
		0,0,19,156,1,0,0,0,21,161,1,0,0,0,23,164,1,0,0,0,25,167,1,0,0,0,27,172,
		1,0,0,0,29,174,1,0,0,0,31,176,1,0,0,0,33,178,1,0,0,0,35,180,1,0,0,0,37,
		182,1,0,0,0,39,184,1,0,0,0,41,186,1,0,0,0,43,188,1,0,0,0,45,190,1,0,0,
		0,47,192,1,0,0,0,49,194,1,0,0,0,51,196,1,0,0,0,53,199,1,0,0,0,55,201,1,
		0,0,0,57,204,1,0,0,0,59,207,1,0,0,0,61,210,1,0,0,0,63,214,1,0,0,0,65,217,
		1,0,0,0,67,219,1,0,0,0,69,224,1,0,0,0,71,230,1,0,0,0,73,232,1,0,0,0,75,
		235,1,0,0,0,77,238,1,0,0,0,79,241,1,0,0,0,81,244,1,0,0,0,83,247,1,0,0,
		0,85,254,1,0,0,0,87,260,1,0,0,0,89,269,1,0,0,0,91,273,1,0,0,0,93,278,1,
		0,0,0,95,282,1,0,0,0,97,288,1,0,0,0,99,295,1,0,0,0,101,302,1,0,0,0,103,
		308,1,0,0,0,105,311,1,0,0,0,107,321,1,0,0,0,109,323,1,0,0,0,111,327,1,
		0,0,0,113,337,1,0,0,0,115,339,1,0,0,0,117,349,1,0,0,0,119,354,1,0,0,0,
		121,358,1,0,0,0,123,362,1,0,0,0,125,371,1,0,0,0,127,128,5,59,0,0,128,2,
		1,0,0,0,129,130,5,58,0,0,130,4,1,0,0,0,131,132,5,105,0,0,132,133,5,102,
		0,0,133,6,1,0,0,0,134,135,5,123,0,0,135,8,1,0,0,0,136,137,5,125,0,0,137,
		10,1,0,0,0,138,139,5,101,0,0,139,140,5,108,0,0,140,141,5,115,0,0,141,142,
		5,101,0,0,142,12,1,0,0,0,143,144,5,119,0,0,144,145,5,104,0,0,145,146,5,
		105,0,0,146,147,5,108,0,0,147,148,5,101,0,0,148,14,1,0,0,0,149,150,5,102,
		0,0,150,151,5,111,0,0,151,152,5,114,0,0,152,16,1,0,0,0,153,154,5,105,0,
		0,154,155,5,110,0,0,155,18,1,0,0,0,156,157,5,102,0,0,157,158,5,114,0,0,
		158,159,5,111,0,0,159,160,5,109,0,0,160,20,1,0,0,0,161,162,5,116,0,0,162,
		163,5,111,0,0,163,22,1,0,0,0,164,165,5,98,0,0,165,166,5,121,0,0,166,24,
		1,0,0,0,167,168,5,102,0,0,168,169,5,117,0,0,169,170,5,110,0,0,170,171,
		5,99,0,0,171,26,1,0,0,0,172,173,5,40,0,0,173,28,1,0,0,0,174,175,5,41,0,
		0,175,30,1,0,0,0,176,177,5,44,0,0,177,32,1,0,0,0,178,179,5,91,0,0,179,
		34,1,0,0,0,180,181,5,93,0,0,181,36,1,0,0,0,182,183,5,94,0,0,183,38,1,0,
		0,0,184,185,5,42,0,0,185,40,1,0,0,0,186,187,5,47,0,0,187,42,1,0,0,0,188,
		189,5,37,0,0,189,44,1,0,0,0,190,191,5,43,0,0,191,46,1,0,0,0,192,193,5,
		45,0,0,193,48,1,0,0,0,194,195,5,60,0,0,195,50,1,0,0,0,196,197,5,60,0,0,
		197,198,5,61,0,0,198,52,1,0,0,0,199,200,5,62,0,0,200,54,1,0,0,0,201,202,
		5,62,0,0,202,203,5,61,0,0,203,56,1,0,0,0,204,205,5,61,0,0,205,206,5,61,
		0,0,206,58,1,0,0,0,207,208,5,33,0,0,208,209,5,61,0,0,209,60,1,0,0,0,210,
		211,5,97,0,0,211,212,5,110,0,0,212,213,5,100,0,0,213,62,1,0,0,0,214,215,
		5,111,0,0,215,216,5,114,0,0,216,64,1,0,0,0,217,218,5,33,0,0,218,66,1,0,
		0,0,219,220,5,116,0,0,220,221,5,114,0,0,221,222,5,117,0,0,222,223,5,101,
		0,0,223,68,1,0,0,0,224,225,5,102,0,0,225,226,5,97,0,0,226,227,5,108,0,
		0,227,228,5,115,0,0,228,229,5,101,0,0,229,70,1,0,0,0,230,231,5,61,0,0,
		231,72,1,0,0,0,232,233,5,42,0,0,233,234,5,61,0,0,234,74,1,0,0,0,235,236,
		5,47,0,0,236,237,5,61,0,0,237,76,1,0,0,0,238,239,5,37,0,0,239,240,5,61,
		0,0,240,78,1,0,0,0,241,242,5,43,0,0,242,243,5,61,0,0,243,80,1,0,0,0,244,
		245,5,45,0,0,245,246,5,61,0,0,246,82,1,0,0,0,247,248,5,114,0,0,248,249,
		5,101,0,0,249,250,5,116,0,0,250,251,5,117,0,0,251,252,5,114,0,0,252,253,
		5,110,0,0,253,84,1,0,0,0,254,255,5,98,0,0,255,256,5,114,0,0,256,257,5,
		101,0,0,257,258,5,97,0,0,258,259,5,107,0,0,259,86,1,0,0,0,260,261,5,99,
		0,0,261,262,5,111,0,0,262,263,5,110,0,0,263,264,5,116,0,0,264,265,5,105,
		0,0,265,266,5,110,0,0,266,267,5,117,0,0,267,268,5,101,0,0,268,88,1,0,0,
		0,269,270,5,65,0,0,270,271,5,110,0,0,271,272,5,121,0,0,272,90,1,0,0,0,
		273,274,5,66,0,0,274,275,5,111,0,0,275,276,5,111,0,0,276,277,5,108,0,0,
		277,92,1,0,0,0,278,279,5,73,0,0,279,280,5,110,0,0,280,281,5,116,0,0,281,
		94,1,0,0,0,282,283,5,70,0,0,283,284,5,108,0,0,284,285,5,111,0,0,285,286,
		5,97,0,0,286,287,5,116,0,0,287,96,1,0,0,0,288,289,5,78,0,0,289,290,5,117,
		0,0,290,291,5,109,0,0,291,292,5,98,0,0,292,293,5,101,0,0,293,294,5,114,
		0,0,294,98,1,0,0,0,295,296,5,83,0,0,296,297,5,116,0,0,297,298,5,114,0,
		0,298,299,5,105,0,0,299,300,5,110,0,0,300,301,5,103,0,0,301,100,1,0,0,
		0,302,303,5,65,0,0,303,304,5,114,0,0,304,305,5,114,0,0,305,306,5,97,0,
		0,306,307,5,121,0,0,307,102,1,0,0,0,308,309,5,95,0,0,309,104,1,0,0,0,310,
		312,3,103,51,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,318,
		3,107,53,0,314,317,3,107,53,0,315,317,3,113,56,0,316,314,1,0,0,0,316,315,
		1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,106,1,0,0,
		0,320,318,1,0,0,0,321,322,7,0,0,0,322,108,1,0,0,0,323,324,3,111,55,0,324,
		325,5,46,0,0,325,326,3,111,55,0,326,110,1,0,0,0,327,334,3,113,56,0,328,
		330,3,103,51,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,333,
		3,113,56,0,332,329,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,
		0,0,335,112,1,0,0,0,336,334,1,0,0,0,337,338,7,1,0,0,338,114,1,0,0,0,339,
		344,5,34,0,0,340,343,3,117,58,0,341,343,8,2,0,0,342,340,1,0,0,0,342,341,
		1,0,0,0,343,346,1,0,0,0,344,345,1,0,0,0,344,342,1,0,0,0,345,347,1,0,0,
		0,346,344,1,0,0,0,347,348,5,34,0,0,348,116,1,0,0,0,349,351,5,92,0,0,350,
		352,7,3,0,0,351,350,1,0,0,0,352,118,1,0,0,0,353,355,5,13,0,0,354,353,1,
		0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,5,10,0,0,357,120,1,0,0,0,
		358,359,7,4,0,0,359,360,1,0,0,0,360,361,6,60,0,0,361,122,1,0,0,0,362,366,
		5,35,0,0,363,365,8,5,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,
		0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,370,6,61,0,0,370,
		124,1,0,0,0,371,372,5,35,0,0,372,373,5,35,0,0,373,377,1,0,0,0,374,376,
		9,0,0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,378,1,0,0,0,377,375,1,0,0,
		0,378,380,1,0,0,0,379,377,1,0,0,0,380,381,5,35,0,0,381,382,5,35,0,0,382,
		383,1,0,0,0,383,384,6,62,0,0,384,126,1,0,0,0,12,0,311,316,318,329,334,
		342,344,351,354,366,377,1,6,0,0
	]

	public
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}