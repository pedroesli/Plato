// Generated from Grammar/Plato.g4 by ANTLR 4.13.1
import Antlr4

open class PlatoLexer: Lexer {

	internal static var _decisionToDFA: [DFA] = {
          var decisionToDFA = [DFA]()
          let length = PlatoLexer._ATN.getNumberOfDecisions()
          for i in 0..<length {
          	    decisionToDFA.append(DFA(PlatoLexer._ATN.getDecisionState(i)!, i))
          }
           return decisionToDFA
     }()

	internal static let _sharedContextCache = PredictionContextCache()

	public
	static let T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, 
            T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, 
            T__15=16, T__16=17, EXP=18, MUL=19, DIV=20, MOD=21, PLUS=22, 
            MINUS=23, LT=24, LTE=25, GT=26, GTE=27, EQUAL=28, DIF=29, AND=30, 
            OR=31, NOT=32, TRUE=33, FALSE=34, ASSIGN=35, MUL_ASSIGN=36, 
            DIV_ASSIGN=37, MOD_ASSIGN=38, ADD_ASSIGN=39, SUB_ASSIGN=40, 
            RETURN=41, BREAK=42, CONTINUE=43, ID=44, FLOAT=45, INT=46, STRING=47, 
            NEWLINE=48, WS=49, COMMENT=50, COMMENT_LONG=51

	public
	static let channelNames: [String] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	]

	public
	static let modeNames: [String] = [
		"DEFAULT_MODE"
	]

	public
	static let ruleNames: [String] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"EXP", "MUL", "DIV", "MOD", "PLUS", "MINUS", "LT", "LTE", "GT", "GTE", 
		"EQUAL", "DIF", "AND", "OR", "NOT", "TRUE", "FALSE", "ASSIGN", "MUL_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "RETURN", "BREAK", 
		"CONTINUE", "ID", "LETTER", "FLOAT", "INT", "DIGIT", "STRING", "ESC", 
		"NEWLINE", "WS", "COMMENT", "COMMENT_LONG"
	]

	private static let _LITERAL_NAMES: [String?] = [
		nil, "';'", "'if'", "'{'", "'}'", "'else'", "'while'", "'for'", "'in'", 
		"'from'", "'to'", "'by'", "'func'", "'('", "')'", "','", "'['", "']'", 
		"'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'!='", "'and'", "'or'", "'!'", "'true'", "'false'", "'='", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'return'", "'break'", "'continue'"
	]
	private static let _SYMBOLIC_NAMES: [String?] = [
		nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 
		nil, nil, nil, nil, "EXP", "MUL", "DIV", "MOD", "PLUS", "MINUS", "LT", 
		"LTE", "GT", "GTE", "EQUAL", "DIF", "AND", "OR", "NOT", "TRUE", "FALSE", 
		"ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", 
		"RETURN", "BREAK", "CONTINUE", "ID", "FLOAT", "INT", "STRING", "NEWLINE", 
		"WS", "COMMENT", "COMMENT_LONG"
	]
	public
	static let VOCABULARY = Vocabulary(_LITERAL_NAMES, _SYMBOLIC_NAMES)


	override open
	func getVocabulary() -> Vocabulary {
		return PlatoLexer.VOCABULARY
	}

	public
	required init(_ input: CharStream) {
	    RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION)
		super.init(input)
		_interp = LexerATNSimulator(self, PlatoLexer._ATN, PlatoLexer._decisionToDFA, PlatoLexer._sharedContextCache)
	}

	override open
	func getGrammarFileName() -> String { return "Plato.g4" }

	override open
	func getRuleNames() -> [String] { return PlatoLexer.ruleNames }

	override open
	func getSerializedATN() -> [Int] { return PlatoLexer._serializedATN }

	override open
	func getChannelNames() -> [String] { return PlatoLexer.channelNames }

	override open
	func getModeNames() -> [String] { return PlatoLexer.modeNames }

	override open
	func getATN() -> ATN { return PlatoLexer._ATN }

	static let _serializedATN:[Int] = [
		4,0,51,324,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,1,1,2,1,
		2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
		11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
		17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
		24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,
		29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,
		33,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,
		37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
		40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,43,3,43,251,8,43,1,43,1,43,1,43,5,43,256,8,43,10,43,12,43,259,
		9,43,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,3,46,269,8,46,1,46,5,46,272,
		8,46,10,46,12,46,275,9,46,1,47,1,47,1,48,1,48,1,48,5,48,282,8,48,10,48,
		12,48,285,9,48,1,48,1,48,1,49,1,49,3,49,291,8,49,1,50,3,50,294,8,50,1,
		50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,5,52,304,8,52,10,52,12,52,307,9,
		52,1,52,1,52,1,53,1,53,1,53,1,53,5,53,315,8,53,10,53,12,53,318,9,53,1,
		53,1,53,1,53,1,53,1,53,2,283,316,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
		32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
		44,89,0,91,45,93,46,95,0,97,47,99,0,101,48,103,49,105,50,107,51,1,0,6,
		2,0,65,90,97,122,1,0,48,57,2,0,34,34,92,92,7,0,34,34,97,98,102,102,110,
		110,114,114,116,116,118,118,2,0,9,9,32,32,2,0,10,10,13,13,330,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,97,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
		0,107,1,0,0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,114,1,0,0,0,7,116,1,0,0,0,
		9,118,1,0,0,0,11,123,1,0,0,0,13,129,1,0,0,0,15,133,1,0,0,0,17,136,1,0,
		0,0,19,141,1,0,0,0,21,144,1,0,0,0,23,147,1,0,0,0,25,152,1,0,0,0,27,154,
		1,0,0,0,29,156,1,0,0,0,31,158,1,0,0,0,33,160,1,0,0,0,35,162,1,0,0,0,37,
		164,1,0,0,0,39,166,1,0,0,0,41,168,1,0,0,0,43,170,1,0,0,0,45,172,1,0,0,
		0,47,174,1,0,0,0,49,176,1,0,0,0,51,179,1,0,0,0,53,181,1,0,0,0,55,184,1,
		0,0,0,57,187,1,0,0,0,59,190,1,0,0,0,61,194,1,0,0,0,63,197,1,0,0,0,65,199,
		1,0,0,0,67,204,1,0,0,0,69,210,1,0,0,0,71,212,1,0,0,0,73,215,1,0,0,0,75,
		218,1,0,0,0,77,221,1,0,0,0,79,224,1,0,0,0,81,227,1,0,0,0,83,234,1,0,0,
		0,85,240,1,0,0,0,87,250,1,0,0,0,89,260,1,0,0,0,91,262,1,0,0,0,93,266,1,
		0,0,0,95,276,1,0,0,0,97,278,1,0,0,0,99,288,1,0,0,0,101,293,1,0,0,0,103,
		297,1,0,0,0,105,301,1,0,0,0,107,310,1,0,0,0,109,110,5,59,0,0,110,2,1,0,
		0,0,111,112,5,105,0,0,112,113,5,102,0,0,113,4,1,0,0,0,114,115,5,123,0,
		0,115,6,1,0,0,0,116,117,5,125,0,0,117,8,1,0,0,0,118,119,5,101,0,0,119,
		120,5,108,0,0,120,121,5,115,0,0,121,122,5,101,0,0,122,10,1,0,0,0,123,124,
		5,119,0,0,124,125,5,104,0,0,125,126,5,105,0,0,126,127,5,108,0,0,127,128,
		5,101,0,0,128,12,1,0,0,0,129,130,5,102,0,0,130,131,5,111,0,0,131,132,5,
		114,0,0,132,14,1,0,0,0,133,134,5,105,0,0,134,135,5,110,0,0,135,16,1,0,
		0,0,136,137,5,102,0,0,137,138,5,114,0,0,138,139,5,111,0,0,139,140,5,109,
		0,0,140,18,1,0,0,0,141,142,5,116,0,0,142,143,5,111,0,0,143,20,1,0,0,0,
		144,145,5,98,0,0,145,146,5,121,0,0,146,22,1,0,0,0,147,148,5,102,0,0,148,
		149,5,117,0,0,149,150,5,110,0,0,150,151,5,99,0,0,151,24,1,0,0,0,152,153,
		5,40,0,0,153,26,1,0,0,0,154,155,5,41,0,0,155,28,1,0,0,0,156,157,5,44,0,
		0,157,30,1,0,0,0,158,159,5,91,0,0,159,32,1,0,0,0,160,161,5,93,0,0,161,
		34,1,0,0,0,162,163,5,94,0,0,163,36,1,0,0,0,164,165,5,42,0,0,165,38,1,0,
		0,0,166,167,5,47,0,0,167,40,1,0,0,0,168,169,5,37,0,0,169,42,1,0,0,0,170,
		171,5,43,0,0,171,44,1,0,0,0,172,173,5,45,0,0,173,46,1,0,0,0,174,175,5,
		60,0,0,175,48,1,0,0,0,176,177,5,60,0,0,177,178,5,61,0,0,178,50,1,0,0,0,
		179,180,5,62,0,0,180,52,1,0,0,0,181,182,5,62,0,0,182,183,5,61,0,0,183,
		54,1,0,0,0,184,185,5,61,0,0,185,186,5,61,0,0,186,56,1,0,0,0,187,188,5,
		33,0,0,188,189,5,61,0,0,189,58,1,0,0,0,190,191,5,97,0,0,191,192,5,110,
		0,0,192,193,5,100,0,0,193,60,1,0,0,0,194,195,5,111,0,0,195,196,5,114,0,
		0,196,62,1,0,0,0,197,198,5,33,0,0,198,64,1,0,0,0,199,200,5,116,0,0,200,
		201,5,114,0,0,201,202,5,117,0,0,202,203,5,101,0,0,203,66,1,0,0,0,204,205,
		5,102,0,0,205,206,5,97,0,0,206,207,5,108,0,0,207,208,5,115,0,0,208,209,
		5,101,0,0,209,68,1,0,0,0,210,211,5,61,0,0,211,70,1,0,0,0,212,213,5,42,
		0,0,213,214,5,61,0,0,214,72,1,0,0,0,215,216,5,47,0,0,216,217,5,61,0,0,
		217,74,1,0,0,0,218,219,5,37,0,0,219,220,5,61,0,0,220,76,1,0,0,0,221,222,
		5,43,0,0,222,223,5,61,0,0,223,78,1,0,0,0,224,225,5,45,0,0,225,226,5,61,
		0,0,226,80,1,0,0,0,227,228,5,114,0,0,228,229,5,101,0,0,229,230,5,116,0,
		0,230,231,5,117,0,0,231,232,5,114,0,0,232,233,5,110,0,0,233,82,1,0,0,0,
		234,235,5,98,0,0,235,236,5,114,0,0,236,237,5,101,0,0,237,238,5,97,0,0,
		238,239,5,107,0,0,239,84,1,0,0,0,240,241,5,99,0,0,241,242,5,111,0,0,242,
		243,5,110,0,0,243,244,5,116,0,0,244,245,5,105,0,0,245,246,5,110,0,0,246,
		247,5,117,0,0,247,248,5,101,0,0,248,86,1,0,0,0,249,251,5,95,0,0,250,249,
		1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,257,3,89,44,0,253,256,3,89,
		44,0,254,256,3,95,47,0,255,253,1,0,0,0,255,254,1,0,0,0,256,259,1,0,0,0,
		257,255,1,0,0,0,257,258,1,0,0,0,258,88,1,0,0,0,259,257,1,0,0,0,260,261,
		7,0,0,0,261,90,1,0,0,0,262,263,3,93,46,0,263,264,5,46,0,0,264,265,3,93,
		46,0,265,92,1,0,0,0,266,273,3,95,47,0,267,269,5,95,0,0,268,267,1,0,0,0,
		268,269,1,0,0,0,269,270,1,0,0,0,270,272,3,95,47,0,271,268,1,0,0,0,272,
		275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,94,1,0,0,0,275,273,1,0,
		0,0,276,277,7,1,0,0,277,96,1,0,0,0,278,283,5,34,0,0,279,282,3,99,49,0,
		280,282,8,2,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,284,
		1,0,0,0,283,281,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,5,34,0,
		0,287,98,1,0,0,0,288,290,5,92,0,0,289,291,7,3,0,0,290,289,1,0,0,0,291,
		100,1,0,0,0,292,294,5,13,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,
		0,0,0,295,296,5,10,0,0,296,102,1,0,0,0,297,298,7,4,0,0,298,299,1,0,0,0,
		299,300,6,51,0,0,300,104,1,0,0,0,301,305,5,35,0,0,302,304,8,5,0,0,303,
		302,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,
		0,0,0,307,305,1,0,0,0,308,309,6,52,0,0,309,106,1,0,0,0,310,311,5,35,0,
		0,311,312,5,35,0,0,312,316,1,0,0,0,313,315,9,0,0,0,314,313,1,0,0,0,315,
		318,1,0,0,0,316,317,1,0,0,0,316,314,1,0,0,0,317,319,1,0,0,0,318,316,1,
		0,0,0,319,320,5,35,0,0,320,321,5,35,0,0,321,322,1,0,0,0,322,323,6,53,0,
		0,323,108,1,0,0,0,12,0,250,255,257,268,273,281,283,290,293,305,316,1,6,
		0,0
	]

	public
	static let _ATN: ATN = try! ATNDeserializer().deserialize(_serializedATN)
}